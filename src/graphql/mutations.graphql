mutation AddMeal(
  $name: String
  $date: date
  $time: time
  $data: [meal_item_insert_input!]!
  $u_id: uuid!
  $carbs: numeric
  $proteins: numeric
  $fats: numeric
  $energy_cal: numeric
  $energy_kj: numeric
) {
  insert_meal_one(
    object: {
      date: $date
      time: $time
      meal_items: { data: $data }
      name: $name
      u_id: $u_id
      carbohydrates: $carbs
      proteins: $proteins
      fats: $fats
      energy_cal: $energy_cal
      energy_kj: $energy_kj
    }
  ) {
    name
  }
}

mutation DeleteMealById($id: uuid!) {
  delete_meal_item(where: { meal_id: { _eq: $id } }) {
    returning {
      u_id
    }
  }
  delete_meal_by_pk(id: $id) {
    u_id
  }
}

mutation AddFood(
  $name: bpchar
  $proteins: numeric
  $fats: numeric
  $energy_kj: numeric
  $energy_cal: numeric
  $carbohydrates: numeric
  $type: food_type_enum
) {
  insert_food(
    objects: {
      name: $name
      type: $type
      energy_cal: $energy_cal
      energy_kj: $energy_kj
      proteins: $proteins
      carbohydrates: $carbohydrates
      fats: $fats
    }
  ) {
    affected_rows
  }
}

mutation UpdateFood(
  $id: uuid!
  $name: bpchar
  $proteins: numeric
  $fats: numeric
  $energy_kj: numeric
  $energy_cal: numeric
  $carbohydrates: numeric
  $type: food_type_enum
) {
  update_food_by_pk(
    pk_columns: { id: $id }
    _set: {
      name: $name
      energy_cal: $energy_cal
      energy_kj: $energy_kj
      proteins: $proteins
      type: $type
      fats: $fats
      carbohydrates: $carbohydrates
    }
  ) {
    id
  }
}

mutation DeleteFood($id: uuid!) {
  delete_food_by_pk(id: $id) {
    id
  }
}
